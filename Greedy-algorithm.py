import pandas as pdimport networkx as nximport numpy as npdef greedy_set_cover(universe, subsets, scores):    elements = set(e for s in subsets.values() for e in s)    if elements != universe:        raise ValueError("Value Error")        covered = set()    cover = []        while covered != universe:        subset = max(subsets.items(), key=lambda s: (sum(scores[e] for e in s[1] - covered) / len(s[1]), s[0]))        cover.append(subset[0])        covered |= subset[1]        del subsets[subset[0]]        return coverdef read_data(file_path):    df = pd.read_excel(file_path)    df['Symbol'] = df['Symbol'].apply(lambda x: x.split(','))    return dfdef create_network(df):    G = nx.Graph()    for _, row in df.iterrows():        drug = row['Drugs']        genes = row['Symbol']        for gene in genes:            G.add_edge(drug, gene.strip())    return Gdef scoring_function(G):    scores = {}    for node in G.nodes:        if G.nodes[node]['bipartite'] == 1:             degree = G.degree[node]            num_targeting_drugs = len([n for n in G.neighbors(node) if G.nodes[n]['bipartite'] == 0])            scores[node] = degree / (num_targeting_drugs + 1)     return scoresdef top_hubs(scores, n):    sorted_proteins = sorted(scores, key=scores.get, reverse=True)    return set(sorted_proteins[:n])def main():    file_path = 'Table S2 R.xlsx'    df = read_data(file_path)    G = create_network(df)        drugs = set(df['Drugs'])    nx.set_node_attributes(G, {node: 0 if node in drugs else 1 for node in G.nodes()}, 'bipartite')        scores = scoring_function(G)    top_hubs_set = top_hubs(scores, n=150)          drugs = set(df['Drugs'])        original_subsets = {drug: set(G.neighbors(drug)) for drug in drugs}        subsets_copy = {drug: targets & top_hubs_set for drug, targets in original_subsets.items() if targets & top_hubs_set}        selected_drugs = greedy_set_cover(top_hubs_set, subsets_copy, scores)        targeted_proteins = set()    for drug in selected_drugs:        targeted_proteins.update(original_subsets[drug])        result_rows = [{'Drugs': drug, 'Genes': protein} for drug in selected_drugs for protein in original_subsets[drug] if protein in top_hubs_set]    result_df = pd.DataFrame(result_rows).drop_duplicates()        output_file_path = 'Greedy_result.xlsx'    with pd.ExcelWriter(output_file_path) as writer:        result_df.to_excel(writer, sheet_name='Selected_Drugs', index=False)        print(f"Results saved to {output_file_path}")if __name__ == "__main__":    main()